# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      name: 'Builds - build Flutter APK and create github release'
description: 'A GitHub Action that builds a Flutter APK'
author: 'Sayan Biswas'

branding:
  icon: 'maximize'
  color: 'blue'

inputs:
  matrix-target:
    description: 'The build target to use'
    required: true
    default: 'apk --split-per-abi'
    # Map the "matrix.target" variable to the "matrix-target" input.
    # Use the ${{ inputs.matrix-target }} syntax to access the value in the workflow.
    # Use the "default" property to set a default value if the input is not provided.
    # Use the "required" property to make the input mandatory.

runs:
  using: 'docker'
  image: 'Dockerfile'
  # Use Docker to run the action.
  # Specify the path to a Dockerfile that describes the environment for the action.

outputs:
  built-apk:
    description: 'The path to the built APK'
    # Define an output variable for the built APK.
    # Use the ${{ steps.build.outputs.built-apk }} syntax to access the value in the workflow.


permissions:
  contents: 'read'
  # Define the default permissions for the action.

steps:
  - name: 'Set up JDK 11'
    uses: 'actions/setup-java@v1'
    with:
      java-version: '11'
      distribution: 'temurin'
    # Set up JDK 11 using the "actions/setup-java" action.

  - name: 'Clone Flutter repository with master channel'
    uses: 'subosito/flutter-action@v1'
    with:
      channel: 'master'
    # Clone the Flutter repository using the "subosito/flutter-action" action.

  - name: 'Configure Flutter for macOS desktop'
    run: 'flutter config --enable-macos-desktop'
    # Configure Flutter for macOS desktop.

  - name: 'Check Flutter environment'
    run: 'flutter doctor -v'
    # Check the Flutter environment.

  - name: 'Checkout code'
    uses: 'actions/checkout@v2'
    # Checkout the app code using the "actions/checkout" action.

  - name: 'Get packages'
    run: 'flutter pub get'
    # Get the Flutter packages.

  - name: 'Build APK'
    id: 'build'
    run: 'flutter build ${{ inputs.matrix-target }} && echo "::set-output name=built-apk::build/app/outputs/flutter-apk/"'
    # Build the APK using the value of the "matrix-target" input.
    # Use the "id" property to give the step a unique identifier.
    # Use the "::set-output" command to set the value of the "built-apk" output variable.

  - name: 'Upload APK'
    uses: 'actions/upload-artifact@v2'
    with:
      name: 'Built APK'
      path: '${{ steps.build.outputs.built-apk }}'
    # Upload the built APK
            
